import streamlit as st
import pandas as pd
import pydeck as pdk
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import json
import random
import matplotlib.cm as cm
import matplotlib.colors as mcolors
from datetime import datetime
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# -------------------------------
# SETUP PAGE
# -------------------------------
st.set_page_config(page_title="Bangkok Analysis", layout="wide")
st.title('Traffy Fondue Dataset')
tab1, tab2, tab3 = st.tabs(["\U0001F4CA Overview", "\U0001F3ED District Performance", "\U0001F916 Model Results"])

# -------------------------------
# LOAD DATA
# -------------------------------
@st.cache_data
def load_data():
    data = pd.read_csv('data/processed_traffy.csv')
    data['coords'] = data['coords'].str.strip('()')
    data[['longitude', 'latitude']] = data['coords'].str.split(',', expand=True).astype(float)
    data.drop(columns='coords', inplace=True)
    data = data[data['state'] == '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô']
    data = data[data['type'].isin(['{‡∏ó‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥}', '{‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡πâ‡∏≤}', '{‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á}', '{‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á}', '{‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ}'])]
    data['timestamp'] = pd.to_datetime(data['timestamp'], format='mixed', utc=True)
    data['last_activity'] = pd.to_datetime(data['last_activity'], format='mixed', utc=True)

    with open("data/Bangkok-districts.geojson", encoding="utf-8") as f:
        geojson_data = json.load(f)

    results = pd.read_csv('data/result_total.csv')
    return data, geojson_data, results

df, geojson_data, results = load_data()

# -------------------------------
# SETUP GEOJSON COLOR LAYER
# -------------------------------
for feature in geojson_data["features"]:
    feature["properties"]["fill_color"] = [
        random.randint(100, 255),
        random.randint(100, 255),
        random.randint(100, 255),
        30
    ]

geojson_layer = pdk.Layer(
    "GeoJsonLayer",
    data=geojson_data,
    stroked=True,
    filled=True,
    get_fill_color="properties.fill_color",
    get_line_color=[0, 0, 0, 80],
    auto_highlight=True,
)

# -------------------------------
# SIDEBAR FILTERS
# -------------------------------
min_date = df['timestamp'].min().date()
max_date = df['timestamp'].max().date()

show_total = st.sidebar.checkbox("‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value=False)
selected_types = st.sidebar.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (type)", df['type'].unique())
selected_districts = st.sidebar.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ç‡∏ï (district)", df['district'].unique())
start_date, end_date = st.sidebar.date_input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", [min_date, max_date])

# -------------------------------
# PROCESSING
# -------------------------------
df['time2solve'] = (df['last_activity'] - df['timestamp']).dt.total_seconds() / 3600 / 24

df = df[(df['timestamp'].dt.date >= start_date) & (df['timestamp'].dt.date <= end_date)]

if not show_total:
    filtered_df = df[
        df['type'].isin(selected_types) & df['district'].isin(selected_districts)
    ].copy()
else:
    filtered_df = df.copy()

filtered_df['timestamp_str'] = filtered_df['timestamp'].dt.strftime("%Y-%m-%d %H:%M")
filtered_df['time2solve_str'] = filtered_df['time2solve'].round(2).astype(str)

# -------------------------------
# COLOR CONFIG
# -------------------------------
type_list = df['type'].unique()
cmap = cm.get_cmap('tab10', len(type_list))
color_dict_hex = {t: mcolors.to_hex(cmap(i)) for i, t in enumerate(type_list)}
color_dict_hex['‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'] = '#808080'

district_list = df['district'].unique()
district_map = cm.get_cmap('gist_ncar', len(district_list))
random.seed(42)
district_list = list(district_list)
random.shuffle(district_list)
district_colormap = {
    d: [int(c * 255) for c in district_map(i)[:3]] + [150]
    for i, d in enumerate(district_list)
}

filtered_df['color'] = filtered_df['district'].map(district_colormap)

# -------------------------------
# READY TO RENDER IN TABS
# -------------------------------



with tab1:
    st.header("üìä Overview: ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° Traffy Fondue")

    # --------- HEADER + INFO BOX ---------
    st.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å Traffy Fondue ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£")
    st.info(f"üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ **{filtered_df['type'].nunique()} ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó** ‡∏à‡∏≤‡∏Å **{filtered_df['district'].nunique()} ‡πÄ‡∏Ç‡∏ï**")

    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("üìù ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{filtered_df.shape[0]:,}")
    with col2:
        total_population = filtered_df[['district', 'population']].drop_duplicates()['population'].sum()
        st.metric("üë• ‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£‡∏£‡∏ß‡∏°", f"{total_population:,}")
    with col3:
        st.metric("üìç ‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", f"{filtered_df['district'].nunique()} ‡πÄ‡∏Ç‡∏ï")

    top_district = filtered_df['district'].value_counts().reset_index()
    top_district.columns = ['district', 'case_count']
    if not top_district.empty:
        top1 = top_district.iloc[0]
        st.info(f"üö® ‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: **{top1['district']}** ({top1['case_count']:,} ‡πÄ‡∏Ñ‡∏™)")
    else:
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ç‡∏ï")

    # --------- BAR + PIE CHART ---------
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("üß± ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (‡πÅ‡∏¢‡∏Å‡πÄ‡∏Ç‡∏ï)")
        show_total = st.checkbox("‡∏£‡∏ß‡∏° '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' ‡∏ï‡πà‡∏≠‡πÄ‡∏Ç‡∏ï", value=True)
        type_counts = filtered_df.groupby(['district', 'type']).size().reset_index(name='count')
        overall_counts = filtered_df.groupby('district').size().reset_index(name='count').assign(type='‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
        full_counts = pd.concat([type_counts, overall_counts], ignore_index=True) if show_total else type_counts

        fig = px.bar(
            full_counts, x='district', y='count', color='type',
            color_discrete_map=color_dict_hex, barmode='group',
            text='count', labels={'count': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', 'district': '‡πÄ‡∏Ç‡∏ï', 'type': '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'}
        )
        fig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide', xaxis_tickangle=-45)
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        st.subheader("üç∞ ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
        type_share = filtered_df['type'].value_counts().reset_index()
        type_share.columns = ['type', 'count']
        fig_pie = px.pie(type_share, names='type', values='count', color='type', color_discrete_map=color_dict_hex)
        st.plotly_chart(fig_pie, use_container_width=True)

    # --------- MAP SECTION ---------
    st.subheader("üó∫Ô∏è ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        # ‡∏ß‡∏≤‡∏î map plot
    st.header('Maping Plot')
    layer = pdk.Layer(
        "ScatterplotLayer",
        data=filtered_df,
        get_position=["longitude", "latitude"],
        get_fill_color='color', 
        get_radius=20,
        pickable=True,
    )
    view_state = pdk.ViewState(
        latitude=filtered_df['latitude'].mean(),
        longitude=filtered_df['longitude'].mean(),
        zoom=11,
    )
    tooltip = {
        "html": "<b>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</b> {type}<br/><b>‡πÄ‡∏Ç‡∏ï:</b> {district}<br/><b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</b> {timestamp_str}<br/>",
        "style": {"backgroundColor": "steelblue", "color": "white"}
    }
    if filtered_df.empty:
        st.warning("No data selected. Showing default point.")

    st.pydeck_chart(pdk.Deck(layers=[geojson_layer,layer], 
                            initial_view_state=view_state,
                            tooltip=tooltip,
                            ))
    # ‡∏ß‡∏≤‡∏î map plot
    #‡∏ö‡∏≠‡∏Å‡∏™‡∏µ Map plot
    st.markdown("### ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ç‡∏ï")
    with st.expander("‡∏î‡∏π‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ç‡∏ï"):
        for d, c in district_colormap.items():
            st.markdown(f"<span style='color: rgb({c[0]}, {c[1]}, {c[2]})'>‚¨§</span> {d}", unsafe_allow_html=True)

    #‡∏ö‡∏≠‡∏Å‡∏™‡∏µ Map plot

    # --------- DAILY CASE TREND ---------
    st.subheader("üìÜ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
    daily_case = filtered_df.groupby(filtered_df['timestamp'].dt.date).size().reset_index(name='count')
    fig = px.line(daily_case, x='timestamp', y='count', title='üìà ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô')
    st.plotly_chart(fig, use_container_width=True)

    # --------- TIME2SOLVE BY TYPE/DISTRICT ---------
    st.subheader("‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (‡∏£‡∏≤‡∏¢‡πÄ‡∏Ç‡∏ï)")
    type_time2solve = filtered_df.groupby(['district', 'type'])['time2solve'].mean().reset_index(name='time2solve')
    overall_time2solve = filtered_df.groupby('district')['time2solve'].mean().reset_index(name='time2solve').assign(type='‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
    full_time2solve = pd.concat([type_time2solve, overall_time2solve], ignore_index=True)

    fig_time2solve = px.bar(
        full_time2solve, x='district', y='time2solve', color='type',
        color_discrete_map=color_dict_hex, barmode='group',
        text=full_time2solve['time2solve'].round(1),
        labels={'time2solve': '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏ß‡∏±‡∏ô)', 'district': '‡πÄ‡∏Ç‡∏ï', 'type': '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'}
    )
    fig_time2solve.update_layout(uniformtext_minsize=8, uniformtext_mode='hide', xaxis_tickangle=-45)
    st.plotly_chart(fig_time2solve, use_container_width=True)

    # --------- TOP 5 FASTEST DISTRICTS ---------
    top_fast = filtered_df.groupby('district')['time2solve'].mean().sort_values().reset_index()
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å
    st.subheader("üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÄ‡∏Ç‡∏ï‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏ç‡∏´‡∏≤")

    if not top_fast.empty:
        fastest = top_fast.head(5).iloc[0]
        st.success(f"‚úÖ ‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: **{fastest['district']}** ({fastest['time2solve']:.2f} ‡∏ß‡∏±‡∏ô)")
    fig = px.bar(top_fast.head(5), x='district', y='time2solve',
                title="üî• 5 ‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ß‡∏±‡∏ô)",
                labels={'time2solve': '‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤', 'district': '‡πÄ‡∏Ç‡∏ï'},
                color='time2solve', color_continuous_scale='Greens_r')
    st.plotly_chart(fig, use_container_width=True)

    # Format ‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏™‡∏ß‡∏¢
    top_fast['time2solve'] = top_fast['time2solve'].round(2)
    top_fast.columns = ['‡πÄ‡∏Ç‡∏ï', '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏ß‡∏±‡∏ô)']

    # ‡πÉ‡∏ä‡πâ dataframe UI ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏´‡∏ô‡πâ‡∏≤
    st.dataframe(
        top_fast,
        use_container_width=True,
        hide_index=True
    )





with tab2:
    st.header("üèôÔ∏è District Performance")
    selected_district = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ç‡∏ï", df['district'].unique() if not df.empty else [])

    if selected_district:
        district_df = df[df['district'] == selected_district].copy()

        st.markdown(f"### üìç ‡πÄ‡∏Ç‡∏ï: **{selected_district}**")
        st.caption("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• performance ‡∏£‡∏≤‡∏¢‡πÄ‡∏Ç‡∏ï ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏á‡∏ö ‡∏Ø‡∏•‡∏Ø")

        # ----- METRIC BOXES -----
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üìù ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤", f"{district_df.shape[0]:,}")
        with col2:
            pop = district_df[['district', 'population']].drop_duplicates()['population'].values[0]
            st.metric("üë• ‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£", f"{pop:,}")
        with col3:
            budget = district_df['budget'].mean()
            st.metric("üí∞ ‡∏á‡∏ö‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏™", f"{budget:,.2f} ‡∏ö‡∏≤‡∏ó")
        avg_duration = district_df['time2solve'].mean()
        st.metric("‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤", f"{avg_duration:.2f} ‡∏ß‡∏±‡∏ô")

        # ----- PIE CHART: TYPE SHARE -----
        st.subheader("üìä ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡∏ô‡∏µ‡πâ")
        type_share = district_df['type'].value_counts().reset_index()
        type_share.columns = ['type', 'count']
        fig_pie = px.pie(
            type_share, names='type', values='count',
            color='type', color_discrete_map=color_dict_hex,
            title=f"üßæ ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï {selected_district}"
        )
        st.plotly_chart(fig_pie, use_container_width=True)

        st.subheader("üìÑ ‡πÄ‡∏Ñ‡∏™‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡∏ô‡∏µ‡πâ")
        latest_cases = district_df[['timestamp', 'type', 'comment', 'state']].sort_values(by='timestamp', ascending=False).head(10)
        latest_cases['timestamp'] = latest_cases['timestamp'].dt.strftime('%Y-%m-%d %H:%M')
        st.dataframe(latest_cases, use_container_width=True, hide_index=True)

        # ----- BAR CHART: TIME2SOLVE PER TYPE -----
        st.subheader("‚è±Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
        type_duration = district_df.groupby('type')['time2solve'].mean().reset_index()
        fig = px.bar(
            type_duration, x='type', y='time2solve',
            color='type', color_discrete_map=color_dict_hex,
            title=f"üõ†Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ({selected_district})",
            labels={'time2solve': '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏ß‡∏±‡∏ô)', 'type': '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'}
        )
        fig.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig, use_container_width=True)

        # ----- TIME SERIES: OPEN VS CLOSED VS BACKLOG -----
        st.subheader("üìÜ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö vs ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô")
        district_df['date_opened'] = pd.to_datetime(district_df['timestamp']).dt.date
        district_df['date_closed'] = pd.to_datetime(district_df['last_activity']).dt.date
        open_daily = district_df.groupby('date_opened').size().reset_index(name='opened')
        closed_daily = district_df.groupby('date_closed').size().reset_index(name='closed')

        open_close_df = pd.merge(
            open_daily, closed_daily,
            left_on='date_opened', right_on='date_closed',
            how='outer'
        )
        open_close_df['date'] = open_close_df['date_opened'].combine_first(open_close_df['date_closed'])
        open_close_df['opened'] = open_close_df['opened'].fillna(0)
        open_close_df['closed'] = open_close_df['closed'].fillna(0)
        open_close_df = open_close_df.sort_values('date')
        open_close_df['backlog'] = open_close_df['opened'].cumsum() - open_close_df['closed'].cumsum()

        fig_line = go.Figure()
        fig_line.add_trace(go.Scatter(x=open_close_df['date'], y=open_close_df['opened'],
                                      mode='lines+markers', name='‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á'))
        fig_line.add_trace(go.Scatter(x=open_close_df['date'], y=open_close_df['closed'],
                                      mode='lines+markers', name='‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à'))
        fig_line.add_trace(go.Scatter(x=open_close_df['date'], y=open_close_df['backlog'],
                                      mode='lines', name='Backlog ‡∏™‡∏∞‡∏™‡∏°',
                                      line=dict(dash='dash')))
        fig_line.update_layout(
            title="üìà ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á vs ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à (‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô)",
            xaxis_title="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™", legend_title="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"
        )
        st.plotly_chart(fig_line, use_container_width=True)
        st.caption("üìå ‡∏ñ‡πâ‡∏≤‡πÄ‡∏™‡πâ‡∏ô '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à' ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ '‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á' ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏≠‡∏á‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤")





df3 = results.copy()

with tab3:
    st.header("üìà Model Results")
    st.write("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏Ç‡∏ï‡πÑ‡∏´‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡∏™‡∏∏‡∏î ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û ‡∏Ø‡∏•‡∏Ø")
    st.subheader("üèÜ ‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏ç‡∏´‡∏≤")

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ time2solve ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ç‡∏ï
    eff_df = df3.groupby('district')['time2solve'].mean().reset_index().sort_values('time2solve')

    # ‡∏î‡∏∂‡∏á‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    if not eff_df.empty:
        best = eff_df.iloc[0]
        st.success(f"ü•á ‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠ **{best['district']}** ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÄ‡∏û‡∏µ‡∏¢‡∏á **{best['time2solve']:.2f} ‡∏ß‡∏±‡∏ô**")

    # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü
    fig = px.bar(
        eff_df.head(10),  # Top 10 ‡∏Å‡πá‡∏û‡∏≠
        x='district',
        y='time2solve',
        title="üî• 10 ‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏ç‡∏´‡∏≤",
        labels={'district': '‡πÄ‡∏Ç‡∏ï', 'time2solve': '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏ß‡∏±‡∏ô)'},
        color='time2solve',
        color_continuous_scale='Tealgrn_r',
    )
    fig.update_layout(xaxis_tickangle=-45)
    st.plotly_chart(fig, use_container_width=True)

    slowest_df = eff_df.sort_values('time2solve', ascending=False).head(10)
    # ‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    worst = slowest_df.iloc[0]
    st.error(f"üêå ‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ä‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠ **{worst['district']}** ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ **{worst['time2solve']:.2f} ‡∏ß‡∏±‡∏ô**")
    st.markdown("### üî¥ ‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (TOP 10)")
    fig_slow = px.bar(
        slowest_df,
        x='district',
        y='time2solve',
        labels={'district': '‡πÄ‡∏Ç‡∏ï', 'time2solve': '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏ß‡∏±‡∏ô)'},
        title="üêå ‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î",
        color='time2solve',
        color_continuous_scale='Reds'
    )
    fig_slow.update_layout(xaxis_tickangle=-45)
    st.plotly_chart(fig_slow, use_container_width=True)
    

    st.subheader("ü§ñ Time2Solve Prediction Performance")
    st.caption("‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏í‡∏ô‡∏≤")
    
    # MAE, RMSE, R¬≤
    mae_rf = mean_absolute_error(df3['time2solve'], df3['time2solve_BERT_rf_pred'])
    mae_xgb = mean_absolute_error(df3['time2solve'], df3['time2solve_BERT_xgb_pred'])
    rmse_rf = np.sqrt(mean_squared_error(df3['time2solve'], df3['time2solve_BERT_rf_pred']))
    rmse_xgb = np.sqrt(mean_squared_error(df3['time2solve'], df3['time2solve_BERT_xgb_pred']))
    r2_rf = r2_score(df3['time2solve'], df3['time2solve_BERT_rf_pred'])
    r2_xgb = r2_score(df3['time2solve'], df3['time2solve_BERT_xgb_pred'])

    col1, col2 = st.columns(2)
    with col1:
        st.metric("üìå MAE (RF)", f"{mae_rf:.2f}")
        st.metric("üìå RMSE (RF)", f"{rmse_rf:.2f}")
        st.metric("üìå R¬≤ (RF)", f"{r2_rf:.2f}")
    with col2:
        st.metric("üìå MAE (XGB)", f"{mae_xgb:.2f}")
        st.metric("üìå RMSE (XGB)", f"{rmse_xgb:.2f}")
        st.metric("üìå R¬≤ (XGB)", f"{r2_xgb:.2f}")

    # -------- MAE by District --------
    st.subheader("üèôÔ∏è ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö MAE ‡∏Ç‡∏≠‡∏á RF vs XGB (‡∏£‡∏≤‡∏¢‡πÄ‡∏Ç‡∏ï)")
    district_mae = df3.groupby('district').apply(lambda g: pd.Series({
        'MAE_RF': mean_absolute_error(g['time2solve'], g['time2solve_BERT_rf_pred']),
        'MAE_XGB': mean_absolute_error(g['time2solve'], g['time2solve_BERT_xgb_pred']),
    })).reset_index()
    fig = px.bar(district_mae, x='district', y=['MAE_RF', 'MAE_XGB'],
                 barmode='group',
                 labels={'value': 'MAE', 'district': '‡πÄ‡∏Ç‡∏ï', 'variable': '‡πÇ‡∏°‡πÄ‡∏î‡∏•'})
    st.plotly_chart(fig, use_container_width=True)
    st.dataframe(district_mae, use_container_width=True)

    # -------- MAE by Type --------
    st.subheader("üßæ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö MAE ‡∏Ç‡∏≠‡∏á RF vs XGB (‡∏£‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤)")
    type_mae = df3.groupby('type').apply(lambda g: pd.Series({
        'MAE_RF': mean_absolute_error(g['time2solve'], g['time2solve_BERT_rf_pred']),
        'MAE_XGB': mean_absolute_error(g['time2solve'], g['time2solve_BERT_xgb_pred']),
    })).reset_index()

    fig = px.bar(
        type_mae,
        x='type',
        y=['MAE_RF', 'MAE_XGB'],
        barmode='group',
        labels={'value': 'MAE', 'type': '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤', 'variable': '‡πÇ‡∏°‡πÄ‡∏î‡∏•'},
        title="üìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö MAE ‡∏Ç‡∏≠‡∏á RF vs XGB (‡∏£‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤)"
    )
    fig.update_layout(xaxis_tickangle=-45)
    st.plotly_chart(fig, use_container_width=True)

    st.subheader("üìä MAE ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
    type_mae = df3.groupby('type').apply(lambda g: pd.Series({
        'MAE_RF': mean_absolute_error(g['time2solve'], g['time2solve_BERT_rf_pred']),
        'MAE_XGB': mean_absolute_error(g['time2solve'], g['time2solve_BERT_xgb_pred']),
    })).reset_index()
    st.dataframe(type_mae, use_container_width=True)
